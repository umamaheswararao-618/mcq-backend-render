# ===============================================================
# DATABASE CONNECTION SETTINGS FOR POSTGRESQL (RENDER DEPLOYMENT)
# ===============================================================

# Read the database connection URL, username, and password from environment variables.
# Render will provide these values to your application automatically.
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}

# Explicitly tell Spring Boot which JDBC driver to use for PostgreSQL.
# This prevents any confusion and is the most reliable way to configure the driver.
spring.datasource.driver-class-name=org.postgresql.Driver


# ===============================================================
# JPA & HIBERNATE CONFIGURATION (PRODUCTION SAFE)
# ===============================================================

# Tell Hibernate to use the specific "language" (dialect) for PostgreSQL.
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# This property controls how Hibernate interacts with the database schema.
# "validate" is a much safer choice for production. It will check if your
# database tables match your Java entities on startup and fail if they don't,
# but it will NOT automatically make changes. This prevents accidental data loss.
# For development, you can change this back to "update".
spring.jpa.hibernate.ddl-auto=validate


# ===============================================================
# LOGGING (PRODUCTION SETTINGS)
# ===============================================================

# Set to "false" in production to prevent noisy SQL logs.
# For debugging, you can temporarily set this back to "true".
spring.jpa.show-sql=false

# This is only useful if show-sql is true, so it has no effect when set to false.
spring.jpa.properties.hibernate.format_sql=false
